//просмотр ветки и просмотр ветки и коммита на который она указывает
git branch
git branch -v


user@DESKTOP-V6CC4NK MINGW64 /d/HCIE/git_commands (master)
$ git branch
* master

user@DESKTOP-V6CC4NK MINGW64 /d/HCIE/git_commands (master)
$ git branch -v
* master 464563a how to rename files

<<<<<<< HEAD
=======

//для создания ветки и переход на нее
git branch branch
git checkout feature

//для создания ветки и сразу переключения на нее(две команды в одной)
git chechout -b branch


//Если понадобилось переключиться на другую ветку, но при этом есть 
//незакомиченные измененния в текущей ветке
//Если изменения не нужны и мы готовы с ними расстаться:

git checkout --force master //переключаемся на другую ветку
git checkout --force HEAD //остаемся на ветке, изменения теряются

//А если изменения таки нужно сохранить, и при этом переключиться, то 
//используем команду git stash, она архивирует наши изменения

git stash
//после этого можем переключиться туда и обратно и вернуть изменения командой:
git stash pop


//теперь если нам нужно новое сохрание сохранить в другой пока не созданной
//ветке, то есть если мы сделали изменения, но в мастер ветке их сохранят 
//не хотим

git chechout -b имяветки

//А если мы сделали изменения в мастер ветки,но поняли, что они тут неуместны
//и хотим их переместить в другую пока не созданную ветку
//делаем это из другой не мастер ветки и указываем коммит к которому
нужно верниться

git branch -f master 54a4
git checkout -B master 54a4



//чтобы перейти к определенному коммиту

git checkout 54a4 index(имя файла)

//В этом случае мы переходим на этот коммит и он сразу добавляется в индекс
//А если нужно сбросить файл из индекса, то делаем

git reset index.htm
git reset -- branch (branch - это имя файла, a -- это указание что это именно путь)
git reset -- index


//Если мы внесли изменения в рабочей директории, и хотим их удалить, то есть
//вернуться к последнему коммиту этого файла


git checkout HEAD index.html

//а если нам надо вернуться к изменениям из индека

git checkout <путь>


//переключение на ветку

git checkout master

//переключение на путь

git checkout -- master


//смотрим логи

git log
git log --oneline
git log master --oneline

git show 2702


//а чтобы посмотреть коммит на один шаг назад

git show HEAD~ (где ~ это количество шагов назад)


//вместо тильд можно использовать цифры

git show HEAD~2



//А чтобы посмотреть файл сохраненный коммит, его содержание

git show HEAD~:index.html


//вместо HEAD можно использовать название ветки, тогда мы увидим последний коммит этого файла

git show master:index


//чтобы искать по комментрию коммита. Поиск будем по всем веткам и мы увидим 
последний коммит с искомым словом

git show :/слово
>>>>>>> branch



//удаление ветки
git branch -d fix



//удаление ветки жесткое

git branch -D fix

//при этом удаляется только ссылка, а сами коммиты еще будут жить какое-то время
поэтому их еще можно восстановить:


git branch fix (номер удаленного коммита - он высветится после удаления ветки)




//смотрим логи

cat .git/logs/HEAD

git reflog (от последних вниз к более старым)
git reflog --date=iso (вывод с датами)

git branch <имя ветки> 'HEAD@{номер в рефлоге}'

